version: 2.1

executors:
  base:
    docker:
      - image: cimg/base:2021.01-20.04

jobs:
  trigger:
    parameters:
      executor:
        type: executor
        default: base
      slug:
        type: string
      branch:
        type: string
        default: main
      tag:
        type: string
        default: ""
      api_token_key:
        type: env_var_name
        default: CIRCLE_TOKEN
      parameters:
        type: string
        default: ""
      timeout:
        type: string
        default: "600"
    executor: << parameters.executor >>
    steps:
      - when:
          condition:
            not:
              equal: [<< parameters.tag >>, ""]
          steps:
            - run:
                name: Build JSON body for pipeline trigger using tag
                command: >
                  echo "export JSONBODY='{
                  \"tag\":\"<< parameters.tag >>\",
                  \"parameters\":{<< parameters.parameters >>}
                  }'" >> $BASH_ENV
      - when:
          condition:
            equal: [<< parameters.tag >>, ""]
          steps:
            - run:
                name: Build JSON body for pipeline trigger using branch
                command: >
                  echo "export JSONBODY='{
                  \"branch\":\"<< parameters.branch >>\",
                  \"parameters\":{<< parameters.parameters >>}
                  }'" >> $BASH_ENV
      - run:
          name: Trigger << parameters.slug >> pipeline
          command: |
            STATUSCODE=$(curl -s -L --output /dev/stderr --write-out "%{http_code}" \
            -X POST \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -H "Circle-Token: ${<< parameters.api_token_key >>}" \
            -d "$JSONBODY" \
            https://circleci.com/api/v2/project/<< parameters.slug >>/pipeline 2> out.json)
            if test $STATUSCODE -ge 400; then
            echo
            echo "http status code: ${STATUSCODE}"
            exit 1
            fi
      - run:
          name: Wait << parameters.slug >> pipeline
          command: |
            JOB_NUM=$(cat out.json | jq -r .number)
            for i in {1..<< parameters.timeout >>}; do
                JOB_STATUS=$(curl -s -X GET https://circleci.com/api/v2/project/<< parameters.slug >>/job/${JOB_NUM} \
                --header 'Content-Type: application/json' \
                --header 'Accept: application/json' \
                --header "Circle-Token: $CIRCLE_TOKEN" | jq -r .status)

                case ${JOB_STATUS} in
                    success)
                      echo Job status: ${JOB_STATUS}
                      exit 0
                    ;;
                    failed)
                      echo Job status: ${JOB_STATUS}
                      exit 1
                    ;;
                    canceled) 
                      echo Job status: ${JOB_STATUS}
                      exit 1
                    ;;
                    null)
                      echo Job ${JOB_NUM} not found...
                      exit 1
                    ;;
                    *)
                    test $(($i%10)) -eq 0 && echo Job status: ${JOB_STATUS}... waiting $i/<< parameters.timeout >> sec
                    sleep 1
                    ;;
                esac
            done
            echo "Timeout"
            exit 1


workflows:
  integration-test:
    jobs:
      - trigger:
          name: rtables
          slug: "github/rochecirclecipoc/rtables"
          branch: master
      - trigger:
          name: simpleR
          slug: "github/rochecirclecipoc/simpleR"
          requires:
            - rtables
      - trigger:
          name: rbaseimage
          slug: "github/rochecirclecipoc/rbaseimage"
          requires:
            - simpleR
